#! /usr/bin/env ruby

require 'pg'
require 'io/console'

DB_NAME = 'expenses'
EXPENSE_TABLE = 'expenses'


=begin
Update the code so that is has CLI and ExpenseData classes
CLI - Processes command line arguments
ExpenseData - communicates with the database, formats and displays results straight to 
the stdout
=end


class CLI

  def initialize
    @expense_data = ExpenseData.new
  end

  def display_help_content
    help_message = <<~HELP
    An expense recording system
  
    Commands: 
  
    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
  
    HELP
  
    puts help_message
  end
  
   def run(args = [])
    command = args.first

    case command
    when 'list'
      @expense_data.list_expenses
    when 'add' 
      amount = args[1]
      memo = args[2]
      abort "You must provide an amount and memo when adding an expense" unless amount && memo
      
      @expense_data.add_expense(args[1], args[2])
    when 'delete'
      id_number = args[1]
      abort "You must provide an id number to delete." unless id_number
      @expense_data.delete_expense(id_number)
    when 'search'
      abort "You must enter a search term" unless args[1] && args[1] != ''
      search_term = args[1]

      @expense_data.search_expenses(search_term)
    when 'clear'
      @expense_data.delete_all_expenses
    else
      display_help_content
    end
  end

end

class ExpenseData

  def initialize
    @db_connection = PG.connect(dbname: DB_NAME)
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = 
      "INSERT INTO #{EXPENSE_TABLE} (amount, created_on, memo)
      VALUES ($1, $2, $3);"
    
    @db_connection.exec_params(sql, [amount, date, memo])
  end
  
  def delete_all_expenses
    sql =
      "DELETE FROM #{EXPENSE_TABLE};"

    puts "This will remove all expenses. Are you sure? (y/n)"
    
    user_input = $stdin.getch
    
    if user_input == 'y'
      @db_connection.exec(sql)
      puts "All expenses have been deleted."
    else
      abort
    end
  end

  def delete_expense(id_number)
    sql = "
      DELETE FROM #{EXPENSE_TABLE}
      WHERE id = $1;
      "

    result = @db_connection.exec_params(sql, [id_number.to_i])

    if result.ntuples == 1
      puts "The folloing expense has been deleted:"
      display_expenses(result)
    else
      puts "There is no expense with the id #{id_number}"
    end
  end

  def list_expenses
    sql = "SELECT * FROM expenses ORDER BY created_on ASC;"
    result = @db_connection.exec(sql)
    display_expenses(result)
  end

  def search_expenses(search_term)
    sql = "
      SELECT * FROM #{EXPENSE_TABLE}
      WHERE memo ILIKE $1;
      "

    result = @db_connection.exec_params(sql, ["%#{search_term}%"] )
    display_expenses(result)
  end

  private

  def display_expenses(expenses)
    abort "No expenses to display" if expenses.ntuples == 0

    rows = []
    expenses.each do |tuple|
      columns =[
        tuple["id"].rjust(3),
        tuple["created_on"].rjust(10),
        tuple["amount"].rjust(12),
        tuple["memo"]
      ]
    rows << columns.join(" | ")
    end
  
    puts "Expenses".center(40)
    rows.each { |row| puts row }
    puts
  end

end

CLI.new.run(ARGV)









